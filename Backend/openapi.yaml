openapi: 3.0.3
info:
  title: REST API Website Job Portal
  description: |
    ƒê√¢y l√† REST API cho n·ªÅn t·∫£ng Website Job Portal, cho ph√©p c√°c ·ª©ng vi√™n v√† nh√† tuy·ªÉn d·ª•ng
    t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng tuy·ªÉn d·ª•ng tr·ª±c tuy·∫øn.

    **L∆∞u √Ω khi s·ª≠ d·ª•ng**:
    - C√°c endpoint c√≥ bi·ªÉu t∆∞·ª£ng üîí y√™u c·∫ßu g·ª≠i `Authorization: Bearer <access_token>`.

  version: 1.0.0
servers:
  - url: http://localhost:5000/api/v1
tags:
  - name: Auth
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SignUpRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: user@example.com }
        password: { type: string, minLength: 6, example: 'P@ssw0rd!' }
        name: { type: string, example: 'Tu·∫•n Anh' }
    SignInRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: user@example.com }
        password: { type: string, example: 'P@ssw0rd!' }
    User:
      type: object
      properties:
        id: { type: string, example: 'u_123' }
        email: { type: string, format: email }
        name: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    MeResponse:
      type: object
      properties:
        message: { type: string, example: 'Get user info successfully' }
        data:
          $ref: '#/components/schemas/User'
    Tokens:
      type: object
      properties:
        accessToken: { type: string, example: 'eyJhbGciOi...' }
        refreshToken: { type: string, example: 'eyJhbGciOi...' }
    AuthResponse:
      type: object
      properties:
        tokens: { $ref: '#/components/schemas/Tokens' }

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SignUpRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Sign in
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SignInRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/MeResponse'
